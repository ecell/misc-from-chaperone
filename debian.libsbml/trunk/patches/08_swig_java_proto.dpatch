--- libsbml-2.3.4.orig/src/bindings/java/local.i	2005-10-04 00:36:52.000000000 +0900
+++ libsbml-2.3.4/src/bindings/java/local.i	2007-07-12 00:53:27.536648170 +0900
@@ -106,11 +106,11 @@
  */
 %pragma(java) modulecode =
 %{
-  public static SBase DowncastSBase(long cPtr, boolean owner)
+  public static SBase DowncastSBase(long cPtr, SBase ref, boolean owner)
   {
     if (cPtr == 0) return null;
 
-    switch( libsbmlJNI.SBase_getTypeCode(cPtr) )
+    switch( libsbmlJNI.SBase_getTypeCode(cPtr, ref) )
     {
       case libsbmlConstants.SBML_COMPARTMENT:
         return new Compartment(cPtr, owner);
@@ -189,11 +189,11 @@
  */
 %pragma(java) modulecode =
 %{
-  public static SBase DowncastSBase(long cPtr, boolean owner)
+  public static SBase DowncastSBase(long cPtr, SBase ref, boolean owner)
   {
     if (cPtr == 0) return null;
 
-    switch( libsbmlJNI.SBase_getTypeCode(cPtr) )
+    switch( libsbmlJNI.SBase_getTypeCode(cPtr, ref) )
     {
       case libsbmlConstants.SBML_COMPARTMENT:
         return new Compartment(cPtr, owner);
@@ -309,7 +309,7 @@
  */
 %typemap("javaout") SBase*
 {
-  return libsbml.DowncastSBase($jnicall, $owner);
+  return libsbml.DowncastSBase($jnicall, this, $owner);
 }
 
 /**
@@ -317,7 +317,7 @@
  */
 %typemap("javaout") Rule*
 {
-  return (Rule) libsbml.DowncastSBase($jnicall, $owner);
+  return (Rule) libsbml.DowncastSBase($jnicall, this, $owner);
 }
 
 
@@ -443,8 +443,11 @@
 import java.io.File;
 "
 
+/*
+
 %javamethodmodifiers       SBMLReader::readSBML "private";
 %rename(readSBMLInternal)  SBMLReader::readSBML;
+*/
 
 %typemap("javacode") SBMLReader
 %{
@@ -452,7 +455,7 @@
   {
     File   file    = new java.io.File(filename);
     String abspath = file.getAbsolutePath();
-    long   cPtr    = libsbmlJNI.SBMLReader_readSBMLInternal(swigCPtr, abspath);
+    long   cPtr    = libsbmlJNI.SBMLReader_readSBMLInternal(swigCPtr, this, abspath);
     return (cPtr == 0) ? null : new SBMLDocument(cPtr, true);
   }
 %}
