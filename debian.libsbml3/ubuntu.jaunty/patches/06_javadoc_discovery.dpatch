#! /bin/sh /usr/share/dpatch/dpatch-run
## 06_javadoc_discovery.dpatch by  <moriyoshi@dynein>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad libsbml-3.1.1~/config/java.m4 libsbml-3.1.1/config/java.m4
--- libsbml-3.1.1~/config/java.m4	2008-06-21 17:43:27.907744015 +0900
+++ libsbml-3.1.1/config/java.m4	2008-06-21 17:43:37.000000000 +0900
@@ -47,12 +47,14 @@
       AC_PATH_PROG([JAVA], [java], [no], [$with_java/bin])
       AC_PATH_PROG([JAVAC], [javac], [no], [$with_java/bin])
       AC_PATH_PROG([JAR], [jar], [no], [$with_java/bin])
+      AC_PATH_PROG([JAVADOC], [javadoc], [no], [$with_java/bin])
     else
       dnl No prefix directory path supplied for --with-java.  Use defaults.
 
       AC_PATH_PROG([JAVA], [java])
       AC_PATH_PROG([JAVAC], [javac])
       AC_PATH_PROG([JAR], [jar])
+      AC_PATH_PROG([JAVADOC], [javadoc])
     fi
 
     dnl Sanity checks.
@@ -194,7 +196,6 @@
         if test -e "$headers/jni.h"; then
           JAVA_CPPFLAGS="$JAVA_CPPFLAGS -I\"$headers\""
           parent=`dirname "$headers"`
-          JAVADOC_JAR="$parent/Classes/classes.jar"
         else
           AC_MSG_ERROR([Cannot find Java include files.])
         fi
@@ -229,8 +230,6 @@
           linux*)   JAVA_CPPFLAGS="$JAVA_CPPFLAGS -I\"$parent/include/linux\"";;
           solaris*) JAVA_CPPFLAGS="$JAVA_CPPFLAGS -I\"$parent/include/solaris\"";;
         esac
-	    
-        JAVADOC_JAR="$parent/lib/tools.jar"    
       ;;
     esac
 
@@ -273,7 +272,6 @@
     AC_SUBST(JAVA_LDFLAGS)
     AC_SUBST(JNIEXT)
     AC_SUBST(JNIBASENAME)
-    AC_SUBST(JAVADOC_JAR)
 
   fi
 
diff -urNad libsbml-3.1.1~/config/makefile-common-vars.mk.in libsbml-3.1.1/config/makefile-common-vars.mk.in
--- libsbml-3.1.1~/config/makefile-common-vars.mk.in	2008-06-21 17:43:27.907744015 +0900
+++ libsbml-3.1.1/config/makefile-common-vars.mk.in	2008-06-21 17:43:37.000000000 +0900
@@ -118,6 +118,6 @@
 JAVA              = @JAVA@
 JAVAC             = @JAVAC@
 JAR               = @JAR@
-JAVADOC_JAR       = @JAVADOC_JAR@
+JAVADOC           = @JAVADOC@
 JAVA_CPPFLAGS     = @JAVA_CPPFLAGS@
 JAVA_LDFLAGS      = @JAVA_LDFLAGS@
diff -urNad libsbml-3.1.1~/docs/src/ExcludeDoclet.java libsbml-3.1.1/docs/src/ExcludeDoclet.java
--- libsbml-3.1.1~/docs/src/ExcludeDoclet.java	2008-06-21 17:43:26.907687077 +0900
+++ libsbml-3.1.1/docs/src/ExcludeDoclet.java	2008-06-21 17:50:42.000000000 +0900
@@ -97,7 +97,6 @@
 
 import java.io.*;
 import java.util.*;
-import com.sun.tools.javadoc.Main;
 import com.sun.javadoc.*;
 
 /**
@@ -109,14 +108,14 @@
 public class ExcludeDoclet extends Doclet {
     private static List m_args = new ArrayList();
     private static Set m_excludeSet = new HashSet();
-    
+
     /**
      * Iterate through the documented classes and remove the ones that should
      * be excluded.
      * 
      * @param root the initial RootDoc (before filtering).
      */
-    public static boolean start(RootDoc root){
+    public static boolean start(RootDoc root) {
         root.printNotice("ExcludeDoclet: removing excluded source files...");
         ClassDoc[] classes = root.classes();
         for (int i = 0; i < classes.length; i++) {
@@ -126,10 +125,24 @@
                 continue;
                 
             }
+
             m_args.add(classes[i].position().file().getPath());   
         }
-        return true;
         
+        Class[] callees = (new SecurityManager() {
+            public Class[] getClassContext() {
+                return super.getClassContext();
+            }
+        }).getClassContext();
+
+        try {
+            callees[callees.length - 1].getMethod("execute",
+                new Class[] { String[].class }).invoke(
+                    null, new Object[] { m_args.toArray(new String[] {}) });
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return false;
     }
     
     /**
@@ -151,8 +164,10 @@
                 }
                 continue;
             }
-            if (options[i][0].equals("-subpackages")) {
-                continue;   
+            if (options[i][0].equals("-subpackages") ||
+                options[i][0].equals("-doclet") ||
+                options[i][0].equals("-docletpath")) {
+                continue;
             }
             for (int j = 0; j < options[i].length; j++) {
                 m_args.add(options[i][j]);   
@@ -252,22 +267,12 @@
                    option.equals("-helpfile") ||
                    option.equals("-stylesheetfile") ||
                    option.equals("-charset") ||
-                   option.equals("-overview")) {
+                   option.equals("-overview") ||
+                   option.equals("-doclet") ||
+                   option.equals("-docletpath")) {
             return 2;
         } else {
             return 0;
         }
     }
-     
-    /**
-     * Execute this doclet to filter out the unwanted classes and packages.  
-     * Then execute the standard doclet.
-     * 
-     * @param args  the Javadoc arguments from the command line
-     */
-    public static void main(String[] args) {
-        String name = ExcludeDoclet.class.getName();
-        Main.execute(name, name, args);
-        Main.execute((String[]) m_args.toArray(new String[] {}));
-    }
 }
diff -urNad libsbml-3.1.1~/docs/src/Makefile.in libsbml-3.1.1/docs/src/Makefile.in
--- libsbml-3.1.1~/docs/src/Makefile.in	2008-06-21 17:43:27.907744015 +0900
+++ libsbml-3.1.1/docs/src/Makefile.in	2008-06-21 17:43:37.000000000 +0900
@@ -372,7 +372,7 @@
 ignorable-warnings = "warning - @param argument"
 
 java-manual $(java-manual): $(core-sources) ExcludeDoclet.class
-	$(JAVA) -cp $(JAVADOC_JAR):. ExcludeDoclet -excludefile java-skip.txt \
+	$(JAVADOC) -docletpath . -doclet ExcludeDoclet -excludefile java-skip.txt \
 	    -use -public -version -author -sourcetab 4 -keywords \
 	    -nodeprecated \
 	    -header $(javadoc-header) \
